(define $hankaku-kana? 
  (lambda [$c]
    (C.between? c#｡ c#ﾟ)))

(define $normalize-kana
  (lambda [$c]
    (if (hankaku-kana? c)
      (nth (- (ctoi c) (ctoi c#｡) -1) (unpack "。「」、・ヲァィゥェォャュョッーアイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワン゛゜"))
      c)))

(define $katakana?
  (lambda [$c]
    (C.between? c#ァ c#ヾ c)))

(define $katakanas?
  (lambda [$s]
    (all katakana? (unpack s))))

(define $katakana-to-yomi
  (lambda [$s]
    (match s string
      {[<cons ,c#ッ $rs>
        (katakana-to-yomi rs)]
       [<cons  ,c#ー $rs>
        (katakana-to-yomi rs)]
       [<cons  ,c#・ $rs>
        (katakana-to-yomi rs)]
       [<cons ?1#(not (katakana? %1)) $rs>
        (katakana-to-yomi rs)]
       [<cons (& (| ,c#ァ ,c#ィ ,c#ゥ ,c#ェ ,c#ォ) $c) <cons ,c#ー $rs>>
        (S.concat {(match c char {[,c#ァ "A"] [,c#ィ "I"] [,c#ゥ "U"] [,c#ェ "E"] [,c#ォ "O"]}) (katakana-to-yomi rs)})]
       [<cons (& (| ,c#ァ ,c#ィ ,c#ゥ ,c#ェ ,c#ォ) $c) $rs>
        (S.concat {(match c char {[,c#ァ "A"] [,c#ィ "I"] [,c#ゥ "U"] [,c#ェ "E"] [,c#ォ "O"]}) (katakana-to-yomi rs)})]
       [<cons (& (| ,c#ャ ,c#ュ ,c#ョ) $c) <cons ,c#ー $rs>>
        (S.concat {(match c char {[,c#ャ "YA"] [,c#ュ "YU"] [,c#ョ "YO"]}) (katakana-to-yomi rs)})]
       [<cons (& (| ,c#ャ ,c#ュ ,c#ョ) $c) $rs>
        (S.concat {(match c char {[,c#ャ "YA"] [,c#ュ "YU"] [,c#ョ "YO"]}) (katakana-to-yomi rs)})]
       [<cons $c1 <cons (& (| ,c#ャ ,c#ュ ,c#ョ) $c2) <cons ,c#ー $rs>>>
        (S.append (katakana-to-yomi-y-1 (pack {c1 c2})) (katakana-to-yomi rs))]
       [<cons $c1 <cons (& (| ,c#ャ ,c#ュ ,c#ョ) $c2) $rs>>
        (S.append (katakana-to-yomi-y-1 (pack {c1 c2})) (katakana-to-yomi rs))]
       [<cons $c1 <cons (& (| ,c#ァ ,c#ィ ,c#ゥ ,c#ェ ,c#ォ) $c2) <cons ,c#ー $rs>>>
        (S.append (katakana-to-yomi-x-1 (pack {c1 c2})) (katakana-to-yomi rs))]
       [<cons $c1 <cons (& (| ,c#ァ ,c#ィ ,c#ゥ ,c#ェ ,c#ォ) $c2) $rs>>
        (S.append (katakana-to-yomi-x-1 (pack {c1 c2})) (katakana-to-yomi rs))]
       [<cons $c <cons ,c#ー $rs>>
        (S.append (katakana-to-yomi-1 (pack {c})) (katakana-to-yomi rs))]
       [<cons $c $rs>
        (S.append (katakana-to-yomi-1 (pack {c})) (katakana-to-yomi rs))]
       [<nil> ""]
       })))

(define $katakana-to-yomi-y-1
  (lambda [$cs]
    (match cs string
      {[,"キャ" "KYA"] [,"キュ" "KYU"] [,"キョ" "KYO"]
       [,"ギャ" "GYA"] [,"ギュ" "GYU"] [,"ギョ" "GYO"]
       [,"シャ" "SHA"] [,"シュ" "SHU"] [,"ショ" "SHO"]
       [,"ジャ" "JA"] [,"ジュ" "JU"] [,"ジョ" "JO"]
       [,"チャ" "CHA"] [,"チュ" "CHU"] [,"チョ" "CHO"]
       [,"ヂャ" "JA"] [,"ヂュ" "JU"] [,"ヂョ" "JO"]
       [,"ニャ" "NYA"] [,"ニュ" "NU"] [,"ニョ" "NO"]
       [,"ヒャ" "HYA"] [,"ヒュ" "HYU"] [,"ヒョ" "HYO"]
       [,"ビャ" "BYA"] [,"ビュ" "BYU"] [,"ビョ" "BYO"]
       [,"ピャ" "PYA"] [,"ピュ" "PYU"] [,"ピョ" "PYO"]
       [,"ミャ" "MYA"] [,"ミュ" "MYU"] [,"ミョ" "MYO"]
       [,"リャ" "RYA"] [,"リュ" "RYU"] [,"リョ" "RYO"]
       [,"フュ" "FYU"] [,"テュ" "CHU"] [,"デュ" "DYU"]
       [<cons $c1 <cons $c2 <nil>>> (S.append (katakana-to-yomi-1 (pack {c1})) (match c2 char {[,c#ャ "YA"] [,c#ュ "YA"] [,c#ョ "YA"]}))]
       })))

(define $katakana-to-yomi-x-1
  (lambda [$cs]
    (match cs string
      {[,"ウィ" "WI"] [,"ウェ" "WE"] [,"ウォ" "WO"]
       [,"キィ" "KI"]
       [,"クァ" "KA"] [,"クィ" "KI"] [,"クェ" "KE"] [,"クォ" "KO"]
       [,"シィ" "SI"] [,"シェ" "SHE"]
       [,"ジェ" "JE"]
       [,"ツァ" "TSA"] [,"ツィ" "TSI"] [,"ツゥ" "TSU"] [,"ツェ" "TSE"] [,"ツォ" "TSO"] 
       [,"チェ" "CHE"]
       [,"ファ" "FA"] [,"フィ" "FI"] [,"フェ" "FE"] [,"フォ" "FO"]
       [,"ヴァ" "VA"] [,"ヴィ" "VI"] [,"ヴェ" "VE"] [,"ヴォ" "VO"]
       [,"シィ" "SI"] [,"スィ" "SI"] [,"ズィ" "ZI"]
       [,"ティ" "TI"] [,"ディ" "DI"]
       [,"トゥ" "TU"] [,"ヅゥ" "DU"] [,"ドゥ" "DU"]
       [<cons $c1 <cons $c2 <nil>>> (S.append (katakana-to-yomi-1 (pack {c1})) (match c2 char {[,c#ァ "A"] [,c#ィ "I"] [,c#ゥ "U"] [,c#ェ "E"] [,c#ォ "O"]}))]
       })))

(define $katakana-to-yomi-1
  (lambda [$cs]
    (match cs string
      {[,"ア" "A"] [,"イ" "I"] [,"ウ" "U"] [,"エ" "E"] [,"オ" "O"]
       [,"カ" "KA"] [,"キ" "KI"] [,"ク" "KU"] [,"ケ" "KE"] [,"コ" "KO"]
       [,"サ" "SA"] [,"シ" "SHI"] [,"ス" "SU"] [,"セ" "SE"] [,"ソ" "SO"]
       [,"タ" "TA"] [,"チ" "CHI"] [,"ツ" "TSU"] [,"テ" "TE"] [,"ト" "TO"]
       [,"ナ" "NA"] [,"ニ" "NI"] [,"ヌ" "NU"] [,"ネ" "NE"] [,"ノ" "NO"]
       [,"ハ" "HA"] [,"ヒ" "HI"] [,"フ" "FU"] [,"ヘ" "HE"] [,"ホ" "HO"]
       [,"マ" "MA"] [,"ミ" "MI"] [,"ム" "MU"] [,"メ" "ME"] [,"モ" "MO"]
       [,"ヤ" "YA"] [,"ユ" "YU"] [,"ヨ" "YO"]
       [,"ラ" "RA"] [,"リ" "RI"] [,"ル" "RU"] [,"レ" "RE"] [,"ロ" "RO"]
       [,"ワ" "WA"] [,"ヲ" "O"] [,"ン" "N"]
       [,"ガ" "GA"] [,"ギ" "GI"] [,"グ" "GU"] [,"ゲ" "GE"] [,"ゴ" "GO"]
       [,"ザ" "ZA"] [,"ジ" "JI"] [,"ズ" "ZU"] [,"ゼ" "ZE"] [,"ゾ" "ZO"]
       [,"ダ" "DA"] [,"ヂ" "DI"] [,"ヅ" "DU"] [,"デ" "DE"] [,"ド" "DO"]
       [,"バ" "BA"] [,"ビ" "BI"] [,"ブ" "BU"] [,"ベ" "BE"] [,"ボ" "BO"]
       [,"パ" "PA"] [,"ピ" "PI"] [,"プ" "PU"] [,"ペ" "PE"] [,"ポ" "PO"]
       [,"ヴ" "VU"] [,"ヰ" "I"] [,"ヱ" "E"] [,"ヮ" "WA"]
       [,"ヵ" "KA"] [,"ヶ" "KE"]
       })))

;;
;; Ascii (except '-')
;;
(define $zenkaku-ascii (unpack "＃＄％＆＇（）＊＋，．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［＼］＾＿｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝～"))
(define $zenkaku-ascii? (lambda [$c] (C.between? c#' c#～ c)))
(define $zenkaku-ascii-regex "([＃＄％＆＇（）＊＋，．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［＼］＾＿｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝～]+)")

(define $hankaku-ascii (unpack "#$%&'()*+,./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"))
(define $hankaku-ascii? 1#(member? %1 hankaku-ascii?))
(define $hankaku-ascii-regex "([#$%&'()*+,./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~]+)")

(define $normalize-ascii
  (lambda [$str]
    (match str string
      {[<regex ,zenkaku-ascii-regex $hs $ms $ts>
        (normalize-ascii (S.concat hs (S.map (lookup %1 (zip zenkaku-ascii hankaku-ascii)) ms) ts))]
       [_ str]})))

;;
;; Numbers
;;
(define $hankaku-nums (unpack "0123456789"))
(define $hankaku-num? (lambda [$c] (C.between? '0 '9 c)))
(define $hankaku-nums-regex "([0123456789])")

(define $parse-kanji-num
  (lambda [$str]
    (match str string
      {
       [<cons $x <cons ,c#百 $xs>>
        (+ (* 100 (parse-kanji-num (pack {x})))
           (parse-kanji-num xs))]
       [<cons ,c#百 $xs>
        (+ 100 (parse-kanji-num xs))]
       [<cons $x <cons ,c#十 $xs>>
        (+ (* 10 (parse-kanji-num (pack {x})))
           (parse-kanji-num xs))]
       [<cons ,c#十 $xs>
        (+ 10 (parse-kanji-num xs))]
       [,"一" 1]
       [,"二" 2]
       [,"三" 3]
       [,"四" 4]
       [,"五" 5]
       [,"六" 6]
       [,"七" 7]
       [,"八" 8]
       [,"九" 9]
       [<nil> 0]})))

;;
;; Space
;;
(define $zenkaku-space-regex "([　]+)")

(define $normalize-space
  (lambda [$str]
    (match str string
      {[<regex ,zenkaku-space-regex $hs _ $ts> (normalize-space (S.concat {hs " " ts}))]
       [_ str]})))


;;
;; Horizontal line
;;
(define $hr-like-regex "([‐‑‒–―−─ｰ])")
(define $hr-regex      "([-‐‑‒–―−─ｰ])")

(define $normalize-hr
  (lambda [$str]
    (match str string
      {[<regex ,hr-like-regex $hs _ $ts> (normalize-hr (S.concat {hs "-" ts}))]
       [_ str]})))

(define $remove-spaces
  (lambda [$str]
    (match str string
      {[<regex ,"[ ]+" $hs _ $ts> (remove-spaces (S.concat {hs (remove-spaces ts)}))]
       [_ str]})))
